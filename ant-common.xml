<?xml version="1.0" encoding="ISO-8859-1"?>
<project
	name="ant-common" 
	basedir="."
	xmlns:ivy="antlib:org.apache.ivy.ant"
	xmlns:artifact="antlib:org.apache.maven.artifact.ant"
	xmlns:if="ant:if"
    xmlns:unless="ant:unless"
>	

	<!-- set default directory properties -->
	<macrodef name="set-default-props"
			description="set default directory properties">
		
		<sequential>
			<property name="dir.source" location="${basedir}/src" />
			<property name="dir.bin" location="${basedir}/bin" />
			<property name="dir.test.bin" location="${basedir}/testbin" />
			<property name="dir.build" location="${basedir}/build" />
			<property name="dir.javadoc" location="${basedir}/doc" />
			<property name="dir.resource" location="${basedir}/resource" />
			<property name="dir.library" location="${basedir}/lib" />
			<property name="dir.buildlib" location="${dir.build}/libbuild" />
			<property name="dir.buildresource" location="${basedir}/buildresource" />
			<property name="dir.mvn" value="${dir.build}/mvn" />
			<property name="dir.mvnlib" value="${dir.mvn}/lib" />
		</sequential>
	</macrodef>
	
	<!-- create basic build dirs -->
	<macrodef name="create-build-dirs"
			description="create standard build directories">
		
		<sequential>
			<mkdir dir="${dir.bin}" />
			<mkdir dir="${dir.build}" />
			<mkdir dir="${dir.buildlib}" />
			<mkdir dir="${dir.mvn}"/>
			<mkdir dir="${dir.mvnlib}"/>
		</sequential>
	</macrodef>
	
	<!-- create basic build dirs -->
	<macrodef name="clean-build-dirs"
		description="clean all build directories">
		
		<sequential>
			<delete includeemptydirs="true">
				<fileset dir="${dir.bin}" includes="**/*"/>
			</delete>
			<delete includeemptydirs="true">
				<fileset dir="${dir.build}" includes="**/*"/>
			</delete>
			<delete includeemptydirs="true">
				<fileset dir="${dir.test.bin}" includes="**/*"/>
			</delete>
		</sequential>
	</macrodef>

	<!-- setup ivy and download dependencies -->
	<macrodef name="ivy-download-deps"
		description="download ivy and then download dependencies defined in ivy.xml">
		
		<attribute name="ivyjardir" default="${dir.buildlib}"/>
		<attribute name="ivyfile" default="${basedir}/ivy.xml" />
		<attribute name="buildivyfile" default="${dir.buildresource}/ivy.xml" />
		<attribute name="libsdir" default="${dir.library}" />
		<attribute name="buildlibsdir" default="${dir.buildlib}"/>
		<attribute name="namepattern" default="[organisation].[module].[artifact]-[revision](-[classifier]).[ext]"/>
		<attribute name="ivyversion" default="2.2.0"/>
				
		<sequential>
			<echo message="**********************************************************"/>
			<echo message="*  SETUP IVY @{ivy.install.version} AND DOWNLOAD DEPENDENCIES"/>
			<echo message="**********************************************************"/>
		
			<!-- set properties based on parameters -->
			<condition property="buildlibsdir">
				<not>
					<equals arg1="@{buildlibsdir}" arg2="" trim="yes"/>
				</not>
			</condition>
			
			<!-- set ivy properties -->
			<condition property="ivy.home" value="${env.IVY_HOME}">
			  <isset property="env.IVY_HOME" />
			</condition>
			<property name="ivy.jar.dir" value="@{ivyjardir}" />
			<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
			<condition property="ivy.writable">
				<isfileselected file="${ivy.jar.dir}" >
					<writable/>
				</isfileselected>
			</condition>
				
	        <!-- download Ivy from web site so that it can be used even without any special installation -->
			<mkdir dir="${ivy.jar.dir}"/>
			<sequential unless:set="offline">
				<get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/@{ivyversion}/ivy-@{ivyversion}.jar" 
		             dest="${ivy.jar.file}" 
		        		 usetimestamp="true"
		        	    />
			</sequential>
	        
			<!-- fail if no ivy jar file -->
			<fail message="missing ivy.jar and was unable to download the jar">
		    		<condition>
		    			<not>
		    				<available file="${ivy.jar.file}" type="file"/>
		    			</not>
		    		</condition>
	       	</fail>	
			
			<!-- define ivy tasks -->
	        <path id="ivy.lib.path">
	            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
	        </path>
		    <taskdef resource="org/apache/ivy/ant/antlib.xml"
					uri="antlib:org.apache.ivy.ant" 
		     		classpathref="ivy.lib.path"/>
			
			<sequential if:set="buildlibsdir">
				<ivy:resolve file="@{buildivyfile}" />
				<ivy:retrieve sync="false" type="jar" pattern="@{buildlibsdir}/[artifact]-[revision].[ext]" />
			</sequential>
			<ivy:resolve file="@{ivyfile}"/> 
			<ivy:retrieve sync="false" type="jar" pattern="@{libsdir}/@{namepattern}" />
				
	   </sequential>
	</macrodef>
	
	<!-- create a class path from all jars in a dir -->
	<macrodef name="classpath-from-dir">
		<attribute name="dir" default="${dir.library}"/>
		<attribute name="pathname" default="${classpath.name.bin}" />
		<attribute name="pathnamejar" default="${classpath.name.bin}.jar"/>
		<attribute name="jarcplibdir" default="lib" />
		<sequential>
			<echo message="**********************************************************"/>
			<echo message="*  SETUP CLASS PATH @{pathname} for @{dir}"/>
			<echo message="**********************************************************"/>
			
			<path id="@{pathname}">
				<fileset dir="@{dir}"/>
			</path>
	
			<pathconvert property="@{pathnamejar}" pathsep="    ">
				<path>
					<fileset dir="@{dir}">
						<exclude name="ant*.jar" />
					</fileset>
				</path>
				<mapper>
					<chainedmapper>
						<flattenmapper/>
						<globmapper from="*.jar" to="@{jarcplibdir}/*.jar" casesensitive="no"/>
					</chainedmapper>
				</mapper>
			</pathconvert>
				
			<echo message="Generated paths @{pathname} and ${@{pathnamejar}}"/>
	   </sequential>
	</macrodef>
				
	<!-- create javadoc -->
	<macrodef name="create-javadoc">
		<attribute name="srcdir" default="${dir.source}"/>
		<attribute name="destdir" default="${dir.javadoc}"/>
		<attribute name="classpathref" default="${classpath.name.bin}"/>
		<attribute name="package" />
		<attribute name="sourceversion" default="1.8"/>
		
		<sequential>
			<echo message="**********************************************************"/>
			<echo message="*  CREATE JAVADOC FOR @{srcdir} IN @{destdir}"/>
			<echo message="**********************************************************"/>
			
			<javadoc access="private" 
				author="true" 
				classpathref="@{classpathref}" 
				destdir="@{destdir}" 
				nodeprecated="false" 
				nodeprecatedlist="false"
				noindex="false" 
				nonavbar="false" 
				notree="false" 
				packagenames="@{package}" 
				source="@{sourceversion}" 
				sourcepath="@{srcdir}" 
				splitindex="true" 
				use="true" 
				version="true">
			</javadoc>
	   </sequential>
	</macrodef>
	
	<!-- comile java sources with depends -->

	<!-- create maven jars, pom file, and deploy to maven central via OSSRH -->
	<macrodef name="deploy-to-maven-central"
		description="Build jar artifacts, pom.xml, and deplay to maven central">
		<attribute name="destdir" default="${dir.mvnlib}"/>
		<attribute name="srcdir" default="${dir.source}"/>
		<attribute name="ivyfile" default="${basedir}/ivy.xml"/>
		<attribute name="pomtemplate" default="${dir.buildresource}/pom_template.xml" />
		<attribute name="javadocdir" default="${dir.javadoc}"/>
		<attribute name="bindir" default="${dir.bin}"/>
		<attribute name="classpath" default="${classpath.name.build}"/>
		<attribute name="release" default="no" />
		<attribute name="artifactId" default=""/>
		<attribute name="version" default=""/>
		<attribute name="copyjar" default="${jar.bin}"/>
		<attribute name="description" default="${mvn.description}" />
		<attribute name="url" default="${mvn.url}" />
		
		<sequential>
			<!-- properties local to macro -->
			<local name="mvn.build.release.jar"/>
			<local name="mvn.full.version"/>
			<local name="mvn.jar.bin"/>
			<local name="mvn.jar.javadoc"/>
			<local name="mvn.jar.src"/>
			<local name="ossrh-snapshots-repository-url" />
			<local name="ossrh-staging-repository-url" />
			<local name="ossrh-server-id" />		
			<local name="pomfile" />
			
			<property name="pomfile" value="@{destdir}/pom.xml"/>
			
			<!-- check whether release should be build -->
			<condition property="mvn.build.release.jar">
				<equals arg1="@{release}" arg2="yes" trim="yes"/>
			</condition>
			
			<!-- create pom.xml -->
			<echo message="**********************************************************"/>
			<echo message="*  CREATE POM @{pomfile}"/>
			<echo message="**********************************************************"/>

			<ivy:info file="@{ivyfile}" />
			
			<!-- determine group, artifact, version -->
			<condition property="mvn.version" value="${ivy.revision}">
				<equals arg1="@{version}" arg2="" trim="yes"/>
			</condition>
			<condition property="mvn.version" value="@{version}">
				<not><equals arg1="@{version}" arg2="" trim="yes"/></not>
			</condition>
			<condition property="mvn.artifactId" value="${ivy.module}">
				<equals arg1="@{artifactId}" arg2="" trim="yes"/>
			</condition>
			<condition property="mvn.artifactId" value="@{artifactId}">
				<not><equals arg1="@{artifactId}" arg2="" trim="yes"/></not>
			</condition>
			
			<sequential if:set="mvn.build.release.jar">
				<property name="mvn.full.version" value="${mvn.version}-RELEASE"/>
				<property name="mvn.is.release" value="-RELEASE"/>
			</sequential>
			<sequential unless:set="mvn.build.release.jar">
				<property name="mvn.full.version" value="${mvn.version}-SNAPSHOT"/>
				<property name="mvn.is.release" value="-SNAPSHOT"/>
			</sequential>
						
			<!-- make pom from ivy file -->
			<local name="ivy.pom.name" />
			<local name="ivy.pom.description" />
			<local name="ivy.pom.url" />
			<property name="ivy.pom.name" value="${mvn.artifactId}" />
			<property name="ivy.pom.description" value="@{description}" />
			<property name="ivy.pom.url" value="@{url}" />
			
			<echo message="build ${mvn.artifactId} ${mvn.version} (${mvn.full.version}) - ${ivy.pom.name}
				${ivy.pom.description}
				${ivy.pom.url}
				" />
			
			<ivy:makepom ivyfile="@{ivyfile}" pomfile="${pomfile}" templatefile="@{pomtemplate}" conf="default,runtime">
			   <mapping conf="default" scope="compile"/>
			   <mapping conf="runtime" scope="runtime"/>
			</ivy:makepom>
			
			<!-- create jar files -->
			<echo message="**********************************************************"/>
			<echo message="*  CREATE MAVEN JARS"/>
			<echo message="**********************************************************"/>
			
			<!-- define artifacts' name, which follows the convention of Maven -->
			<property name="mvn.jar.bin" value="@{destdir}/${mvn.artifactId}-${mvn.full.version}.jar" />
			<property name="mvn.jar.javadoc" value="@{destdir}/${mvn.artifactId}-${mvn.full.version}-javadoc.jar" />
			<property name="mvn.jar.src" value="@{destdir}/${mvn.artifactId}-${mvn.full.version}-sources.jar" />
	
			
			<copy file="@{copyjar}" tofile="${mvn.jar.bin}" />
			
			<!-- build the javadoc jar -->
			<jar jarfile="${mvn.jar.javadoc}">
				<fileset dir="@{javadocdir}" />
			</jar>
	
			<!-- build the sources jar -->
			<jar jarfile="${mvn.jar.src}">
				<fileset dir="@{srcdir}" />
			</jar>
			
			<echo message="**********************************************************"/>
			<echo message="*  DEPLOY TO OSSRH"/>
			<echo message="**********************************************************"/>
			<!-- define maven task -->
			<typedef resource="org/apache/maven/artifact/ant/antlib.xml" 
				uri="antlib:org.apache.maven.artifact.ant" 
				classpathref="@{classpath}"
				unless:set="mvn.ant.initialized">
			</typedef>
			<property name="mvn.ant.initialized" value="true"/>
			
			<!-- defined maven snapshots and staging repository id and url -->
			<property name="ossrh-snapshots-repository-url" 
			    value="https://oss.sonatype.org/content/repositories/snapshots/" />
			<property name="ossrh-staging-repository-url" 
			    value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />
			<!-- there server id in the Maven settings.xml -->
			<property name="ossrh-server-id" value="ossrh" />

			
			<!-- deploy (either as SNAPSHOT or RELEASE) -->
			<sequential if:set="mvn.build.release.jar">
				<echo message=" - DEPLOY AS RELEASE"/>
			    <!-- sign and deploy the main artifact -->
			    <artifact:mvn classpathref="@{classpath}">
			      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
			      <arg value="-Durl=${ossrh-staging-repository-url}" />
			      <arg value="-DrepositoryId=${ossrh-server-id}" />
			      <arg value="-DpomFile=${pomfile}" />
			      <arg value="-Dfile=${mvn.jar.bin}" />
			      <arg value="-Pgpg" />
			    </artifact:mvn>

			    <!-- sign and deploy the sources artifact -->
			    <artifact:mvn classpathref="@{classpath}">
			      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
			      <arg value="-Durl=${ossrh-staging-repository-url}" />
			      <arg value="-DrepositoryId=${ossrh-server-id}" />
			      <arg value="-DpomFile=${pomfile}" />
			      <arg value="-Dfile=${mvn.jar.src}" />
			      <arg value="-Dclassifier=sources" />
			      <arg value="-Pgpg" />
			    </artifact:mvn>

			    <!-- sign and deploy the javadoc artifact -->
			    <artifact:mvn classpathref="@{classpath}">
			      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
			      <arg value="-Durl=${ossrh-staging-repository-url}" />
			      <arg value="-DrepositoryId=${ossrh-server-id}" />
			      <arg value="-DpomFile=${pomfile}" />
			      <arg value="-Dfile=${mvn.jar.javadoc}" />
			      <arg value="-Dclassifier=javadoc" />
			      <arg value="-Pgpg" />
			    </artifact:mvn>
			</sequential>
			<!-- deploy snapshot -->
			<sequential unless:set="mvn.build.release.jar">
				<echo message=" - DEPLOY AS SNAPSHOT"/>
				<artifact:mvn classpathref="@{classpath}">
		      		<arg value="org.apache.maven.plugins:maven-deploy-plugin:2.6:deploy-file" />
		      		<arg value="-Durl=${ossrh-snapshots-repository-url}" />
		      		<arg value="-DrepositoryId=${ossrh-server-id}" />
		      		<arg value="-DpomFile=${pomfile}" />
		      		<arg value="-Dfile=${mvn.jar.bin}" />
		    		</artifact:mvn>
			</sequential>
	   </sequential>
	</macrodef>
	
	
	<!-- create pom file -->
	<macrodef name="create-mvn-pom"
		description="Build pom.xml">
		<attribute name="destdir" default="${dir.mvnlib}"/>
		<attribute name="ivyfile" default="${basedir}/ivy.xml"/>
		<attribute name="pomtemplate" default="${dir.buildresource}/pom_template.xml" />
		<attribute name="release" default="no" />
		<attribute name="artifactId" default=""/>
		<attribute name="version" default=""/>
		<attribute name="description" default="${mvn.description}" />
		<attribute name="url" default="${mvn.url}" />
		
		<sequential>
			<!-- properties local to macro -->
			<local name="mvn.build.release.jar"/>
			<local name="mvn.full.version"/>
			<local name="pomfile" />
			
			<property name="pomfile" value="@{destdir}/pom.xml"/>
			
			<!-- check whether release should be build -->
			<condition property="mvn.build.release.jar">
				<equals arg1="@{release}" arg2="yes" trim="yes"/>
			</condition>
			
			<!-- create pom.xml -->
			<echo message="**********************************************************"/>
			<echo message="*  CREATE POM @{pomfile}"/>
			<echo message="**********************************************************"/>

			<ivy:info file="@{ivyfile}" />
			
			<!-- determine group, artifact, version -->
			<condition property="mvn.version" value="${ivy.revision}">
				<equals arg1="@{version}" arg2="" trim="yes"/>
			</condition>
			<condition property="mvn.version" value="@{version}">
				<not><equals arg1="@{version}" arg2="" trim="yes"/></not>
			</condition>
			<condition property="mvn.artifactId" value="${ivy.module}">
				<equals arg1="@{artifactId}" arg2="" trim="yes"/>
			</condition>
			<condition property="mvn.artifactId" value="@{artifactId}">
				<not><equals arg1="@{artifactId}" arg2="" trim="yes"/></not>
			</condition>
			
			<sequential if:set="mvn.build.release.jar">
				<property name="mvn.full.version" value="${mvn.version}-RELEASE"/>
				<property name="mvn.is.release" value="-RELEASE"/>
			</sequential>
			<sequential unless:set="mvn.build.release.jar">
				<property name="mvn.full.version" value="${mvn.version}-SNAPSHOT"/>
				<property name="mvn.is.release" value="-SNAPSHOT"/>
			</sequential>
						
			<!-- make pom from ivy file -->
			<local name="ivy.pom.name" />
			<local name="ivy.pom.description" />
			<local name="ivy.pom.url" />
			<property name="ivy.pom.name" value="${mvn.artifactId}" />
			<property name="ivy.pom.description" value="@{description}" />
			<property name="ivy.pom.url" value="@{url}" />
			
			<echo message="build POM for ${mvn.artifactId} ${mvn.version} (${mvn.full.version}) - ${ivy.pom.name}
				${ivy.pom.description}
				${ivy.pom.url}
				" />
			
			<ivy:makepom ivyfile="@{ivyfile}" pomfile="${pomfile}" templatefile="@{pomtemplate}" conf="default,runtime">
			   <mapping conf="default" scope="compile"/>
			   <mapping conf="runtime" scope="runtime"/>
			</ivy:makepom>
	   </sequential>
	</macrodef>
	
	<!-- ******************************************************************************** -->
	<!-- * DEFAULT TARGETS (OVERRIDE IN MAIN IF NEED BE)									-->
	<!-- ******************************************************************************** -->
	
	<target name="mkdirs-and-setup-props">
		<set-default-props />
		
		<property name="jar.bin" value="${dir.build}/${artifactId}.jar" />
		
		<create-build-dirs />
	</target>

	<target name="clean-all"
			description="cleanup all build artifacts"
			depends="mkdirs-and-setup-props">
		<clean-build-dirs />
	</target>
	
	<!-- download dependencies with ivy -->
	<target name="download-dependencies" 
			depends="mkdirs-and-setup-props" 
			description="use ivy to download dependencies">
		
		<fail message="not all parameters setup for downloading dependencies">
			<condition>
				<or>
					<not><isset property="dir.buildlib" /></not>
					<not><isset property="dir.library" /></not>
					<not><isset property="classpath.name.bin" /></not>
					<not><isset property="classpath.name.build" /></not>
				</or>
		 	</condition>
		</fail>
		
		<ivy-download-deps/>
		<classpath-from-dir dir="${dir.buildlib}" 
				pathname="${classpath.name.build}" 
				pathnamejar="${classpath.name.build}.jar"/>
		<classpath-from-dir dir="${dir.library}" 
				pathname="${classpath.name.bin}" 
				pathnamejar="${classpath.name.bin}.jar"/>
	</target>
	
	<!-- Internal Taskdefs -->
	<target name="define-tasks-and-setup-paths" 
			depends="download-dependencies">
	</target>
	
	<!-- Compilation -->	
	<target name="compile" 
			depends="define-tasks-and-setup-paths"
			description="compile Java sources">
		
		<fail message="not all parameters setup for compiling Java sources">
			<condition>
				<or>
					<not><isset property="dir.bin" /></not>
					<not><isset property="dir.source" /></not>
					<not><isset property="classpath.name.bin" /></not>
				</or>
			</condition>
		</fail>
		
		<javac srcdir="${dir.source}" destdir="${dir.bin}" 
			classpathref="${classpath.name.bin}" debug="on" includeantruntime="false">
			<compilerarg value="-Xlint:unchecked" />
		</javac>
	</target>
	
	<!-- generate java doc -->
	<target name="java-doc" 
		depends="define-tasks-and-setup-paths"
		description="generate Javadocs">
		
		<fail message="not all parameters setup for building javadoc">
			<condition>
				<or>
					<not><isset property="package" /></not>
				</or>
			</condition>
		</fail>
		
		<create-javadoc package="${package}"/>
	</target>
	
	<!-- create a jar file -->
	<target name="jar" 
		depends="compile"
		description="generate jar file">

		<fail message="not all parameters setup for building a jar">
			<condition>
				<or>
					<not><isset property="jar.bin" /></not>
					<not><isset property="dir.bin" /></not>
					<not><isset property="mainClass" /></not>
					<not><isset property="classpath.bin.jar" /></not>
					<not><isset property="jar.creator" /></not>
				</or>
			</condition>
		</fail>
		
		<!-- create jar file -->
		<jar destfile="${jar.bin}" basedir="${dir.bin}">
			<manifest>
				<attribute name="Main-Class" value="${mainClass}" />
				<attribute name="Created-By" value="${jar.creator}" />
				<attribute name="Class-Path" value="${classpath.bin.jar}" />
			</manifest>
		</jar>
		<copy file="${jar.bin}" tofile="${basedir}/toxgene.jar" overwrite="true"/>
	</target>
	
	<!-- deploy to mvn central -->
	<target name="create-pom" depends="define-tasks-and-setup-paths">
		<create-mvn-pom/>
	</target>
	
	<target name="deploy-snapshot" 
			depends="jar,java-doc"
			description="generate jars and pom.xml and deploy them as a snapshot to OSSRH">
		<deploy-to-maven-central release="no"/>
	</target>
	
	<target name="deploy-mvn-central" 
			depends="jar,java-doc"
			description="generate jars and pom.xml and deploy them to maven central via OSSRH">
		<deploy-to-maven-central release="yes"/>
	</target>
	
</project>